# Copyright (c) 2014-2017 Cryptography Research, Inc.
# Copyright (c) 2018 the libgoldilocks contributors.
# Released under the MIT License.  See LICENSE.txt for license information.

UNAME := $(shell uname)
MACHINE := $(shell uname -m)

# Subdirectories for objects etc.
# Many of them are mapped to build/obj right now, but could be split later.
# The non-build/obj directories are the public interface.
BUILD_OBJ = build/obj
BUILD_C   = src/GEN
BUILD_PY  = build/obj
BUILD_LIB = build/lib
BUILD_INC = src/public_include
BUILD_BIN = build/bin
BUILD_IBIN = build/obj/bin

DOXYGEN ?= doxygen

ifeq ($(UNAME),Darwin)
CC = clang
CXX = clang++
else
CC = gcc
CXX = g++
endif
LD = $(CC)
LDXX = $(CXX)
ASM ?= $(CC)

PYTHON ?= python

WARNFLAGS = -pedantic -Wall -Wextra -Werror -Wunreachable-code \
	 -Wmissing-declarations -Wunused-function -Wno-overlength-strings $(EXWARN)

INCFLAGS = -Isrc -Isrc/include -I$(BUILD_INC) -Isrc/include/arch_32 -Isrc/arch_32
PUB_INCFLAGS = -I$(BUILD_INC)
LANGFLAGS = -std=c99 -fno-strict-aliasing
LANGXXFLAGS = -fno-strict-aliasing
GENFLAGS = -ffunction-sections -fdata-sections -fvisibility=hidden -fomit-frame-pointer -fPIC
OFLAGS ?= -Os

MACOSX_VERSION_MIN ?= 10.9
ifeq ($(UNAME),Darwin)
GENFLAGS += -mmacosx-version-min=$(MACOSX_VERSION_MIN)
endif

TODAY = $(shell date "+%Y-%m-%d")

ARCHFLAGS ?= -march=native

ifeq ($(CC),clang)
WARNFLAGS_C += -Wgcc-compat
endif

ifeq ($(CXX),clang++)
WARNFLAGS_CXX += -Wgcc-compat
endif

ARCHFLAGS += $(XARCHFLAGS)
CFLAGS  = $(LANGFLAGS) $(WARNFLAGS) $(WARNFLAGS_C) $(INCFLAGS) $(OFLAGS) $(ARCHFLAGS) $(GENFLAGS) $(XCFLAGS)
PUB_CFLAGS  = $(LANGFLAGS) $(WARNFLAGS) $(WARNFLAGS_C) $(PUB_INCFLAGS) $(OFLAGS) $(ARCHFLAGS) $(GENFLAGS) $(XCFLAGS)
CXXFLAGS = $(LANGXXFLAGS) $(WARNFLAGS) $(WARNFLAGS_CXX) $(INCFLAGS) $(OFLAGS) $(ARCHFLAGS) $(GENFLAGS) $(XCXXFLAGS)
LDFLAGS = $(XLDFLAGS)
ASFLAGS = $(ARCHFLAGS) $(XASFLAGS)

SAGE ?= sage
SAGES= $(shell ls test/*.sage)
BUILDPYS= $(SAGES:test/%.sage=$(BUILD_PY)/%.py)

.PHONY: clean all test test_ct bench todo doc lib bat sage sagetest gen_code
.PRECIOUS: $(BUILD_C)/%.c  $(BUILD_IBIN)/%

HEADERS= Makefile.custom $(shell find src test -name "*.h") $(BUILD_OBJ)/timestamp

GENCOMPONENTS = $(BUILD_OBJ)/f_impl.o $(BUILD_OBJ)/f_arithmetic.o $(BUILD_OBJ)/f_generic.o
LIBCOMPONENTS = $(BUILD_OBJ)/utils.o $(BUILD_OBJ)/shake.o $(BUILD_OBJ)/spongerng.o $(GENCOMPONENTS) $(BUILD_OBJ)/goldilocks.o $(BUILD_OBJ)/elligator.o $(BUILD_OBJ)/scalar.o $(BUILD_OBJ)/eddsa.o $(BUILD_OBJ)/decaf_tables.o
BENCHCOMPONENTS = $(BUILD_OBJ)/bench.o $(BUILD_OBJ)/shake.o

all: lib $(BUILD_IBIN)/test $(BUILD_IBIN)/bench $(BUILD_BIN)/shakesum

scan: clean
	scan-build --use-analyzer=`which clang` \
		 -enable-checker deadcode -enable-checker llvm \
		 -enable-checker osx -enable-checker security -enable-checker unix \
		make all

# Internal test programs, which are not part of the final build/bin directory.
$(BUILD_IBIN)/test: $(BUILD_OBJ)/test_goldilocks.o lib
ifeq ($(UNAME),Darwin)
	$(LDXX) $(LDFLAGS) -o $@ $< -L$(BUILD_LIB) -lgoldilocks
else
	$(LDXX) $(LDFLAGS) -Wl,-rpath,`pwd`/$(BUILD_LIB) -o $@ $< -L$(BUILD_LIB) -lgoldilocks
endif

$(BUILD_IBIN)/bench: $(BUILD_OBJ)/bench_goldilocks.o lib
ifeq ($(UNAME),Darwin)
	$(LDXX) $(LDFLAGS) -o $@ $< -L$(BUILD_LIB) -lgoldilocks
else
	$(LDXX) $(LDFLAGS) -Wl,-rpath,`pwd`/$(BUILD_LIB) -o $@ $< -L$(BUILD_LIB) -lgoldilocks
endif

# Create all the build subdirectories
$(BUILD_OBJ)/timestamp:
	mkdir -p $(BUILD_OBJ) $(BUILD_C) $(BUILD_PY) \
		$(BUILD_LIB) $(BUILD_INC) $(BUILD_BIN) $(BUILD_IBIN) $(BUILD_H) $(BUILD_INC)/goldilocks \
		$(PER_OBJ_DIRS) $(BUILD_C)/goldilocks
	touch $@

GEN_CODE = $(BUILD_C)/decaf_tables.c

$(BUILD_IBIN)/goldilocks_gen_tables: $(BUILD_OBJ)/goldilocks_gen_tables.o \
		$(BUILD_OBJ)/goldilocks.o $(BUILD_OBJ)/scalar.o $(BUILD_OBJ)/utils.o \
		$(GENCOMPONENTS)
	$(LD) $(LDFLAGS) -o $@ $^

$(BUILD_C)/decaf_tables.c: $(BUILD_IBIN)/goldilocks_gen_tables
	./$< > $@ || (rm $@; exit 1)

$(BUILD_OBJ)/%.o: $(BUILD_C)/%.c $(HEADERS)
	$(CC) $(CFLAGS) -c -o $@ $< \
		-I build/obj/ -I src/ -I src/arch_32 -I src/include/arch_32

$(BUILD_OBJ)/goldilocks_gen_tables.o: src/goldilocks_gen_tables.c $(HEADERS)
	$(CC) $(CFLAGS) \
		-I build/obj/ -I src -I src/arch_32 -I src/include/arch_32 \
		-c -o $@ $<


# The shakesum utility is in the public bin directory.
$(BUILD_BIN)/shakesum: $(BUILD_OBJ)/shakesum.o $(BUILD_OBJ)/shake.o $(BUILD_OBJ)/utils.o
	$(LD) $(LDFLAGS) -o $@ $^

# The main goldilocks library, and its symlinks.
lib: $(BUILD_LIB)/libgoldilocks.so

$(BUILD_LIB)/libgoldilocks.so: $(BUILD_LIB)/libgoldilocks.so.1
	ln -sf `basename $^` $@

$(BUILD_LIB)/libgoldilocks.so.1: $(LIBCOMPONENTS)
	rm -f $@
ifeq ($(UNAME),Darwin)
	libtool -macosx_version_min $(MACOSX_VERSION_MIN) -dynamic -dead_strip -lc -x -o $@ \
		  $(LIBCOMPONENTS)
else ifeq ($(UNAME),SunOS)
	$(LD) $(LDFLAGS) -shared -Wl,-soname,`basename $@` -o $@ $(LIBCOMPONENTS)
	strip --discard-all $@
else
	$(LD) $(LDFLAGS) -shared -Wl,-soname,`basename $@` -Wl,--gc-sections -o $@ $(LIBCOMPONENTS)
	strip --discard-all $@
endif

# $(BUILD_OBJ)/%.o: src/%.c $(HEADERS)
# 	$(CC) $(CFLAGS) -I src/arch_x86_64 -I src/include/arch_x86_64 \
# 	-c -o $@ $<

$(BUILD_OBJ)/%.o: src/arch_32/%.c $(HEADERS)
	$(CC) $(CFLAGS) -c -o $@ $<

$(BUILD_OBJ)/%.o: src/%.c $(HEADERS)
	$(CC) $(CFLAGS) -c -o $@ $<

$(BUILD_OBJ)/%.o: test/%.c $(HEADERS)
	$(CC) $(PUB_CFLAGS) -c -o $@ $<

$(BUILD_OBJ)/%.o: test/%.cxx $(HEADERS)
	$(CXX) $(CXXFLAGS) -c -o $@ $<

# The sage test scripts
sage: $(BUILDPYS)

sagetest: sage lib
	$(SAGE) $(BUILD_PY)/test_goldilocks.sage

$(BUILDPYS): $(SAGES) $(BUILD_OBJ)/timestamp
	cp -f $(SAGES) $(BUILD_PY)/
	$(SAGE) --preparse $(SAGES:test/%.sage=$(BUILD_PY)/%.sage)
	# some sage versions compile to .sage.py
	for f in $(SAGES:test/%.sage=$(BUILD_PY)/%); do \
		 if [ -e $$f.sage.py ]; then \
		 	 mv $$f.sage.py $$f.py; \
		 fi; \
	  done

# The documentation files
$(BUILD_DOC)/timestamp:
	mkdir -p `dirname $@`
	touch $@
#
doc: Doxyfile $(BUILD_OBJ)/timestamp
	$(DOXYGEN) > /dev/null

gen_code: $(GEN_CODE)

# Finds todo items in .h and .c files
TODO_TYPES ?= HACK TODO @todo FIXME BUG XXX PERF FUTURE REMOVE MAGIC UNIFY
TODO_LOCATIONS ?= src/*.c src/include src/p* test Makefile.custom Doxyfile
todo::
	@(find $(TODO_LOCATIONS) -name '*.h' -or -name '*.c' -or -name '*.cxx' -or -name '*.hxx' -or -name '*.py') | xargs egrep --color=auto -w \
		`echo $(TODO_TYPES) | tr ' ' '|'`
	@echo '============================='
	@(for i in $(TODO_TYPES); do \
	  (find $(TODO_LOCATIONS) -name '*.h' -or -name '*.c' -or -name '*.cxx' -or -name '*.hxx' -or -name '*.py') | xargs egrep -w $$i > /dev/null || continue; \
	  /bin/echo -n $$i'       ' | head -c 10; \
	  (find $(TODO_LOCATIONS) -name '*.h' -or -name '*.c' -or -name '*.cxx' -or -name '*.hxx' -or -name '*.py') | xargs egrep -w $$i| wc -l; \
	done)
	@echo '============================='
	@echo -n 'Total     '
	@(find $(TODO_LOCATIONS) -name '*.h' -or -name '*.c' -or -name '*.cxx' -or -name '*.hxx' -or -name '*.py') | xargs egrep -w \
		`echo $(TODO_TYPES) | tr ' ' '|'` | wc -l

bench: $(BUILD_IBIN)/bench
	./$<

test: $(BUILD_IBIN)/test
	./$<

mem-check: $(BUILD_IBIN)/test
	valgrind --track-origins=yes --error-exitcode=2 --leak-check=full ./$<

microbench: $(BUILD_IBIN)/bench
	./$< --micro

clean:
	rm -fr build

clean_generated: clean
	rm -fr $(BUILD_C)/*
